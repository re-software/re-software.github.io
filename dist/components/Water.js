import './Water.css.proxy.js';
/* src/components/Water.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_style,
	space,
	svg_element,
	toggle_class,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../web_modules/svelte.js";
import Bar from "./Bar.js";

function create_fragment(ctx) {
	let div2;
	let svg0;
	let symbol;
	let path0;
	let path1;
	let path2;
	let path3;
	let t0;
	let div1;
	let bar;
	let t1;
	let div0;
	let current;
	let mounted;
	let dispose;

	bar = new Bar({
			props: {
				timeLimit: /*nextBrewingTime*/ ctx[0],
				start: /*currentState*/ ctx[1] === "brewing"
			}
		});

	return {
		c() {
			div2 = element("div");
			svg0 = svg_element("svg");
			symbol = svg_element("symbol");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			t0 = space();
			div1 = element("div");
			create_component(bar.$$.fragment);
			t1 = space();
			div0 = element("div");

			div0.innerHTML = `<svg viewBox="0 0 560 20" class="water_wave water_wave_back svelte-3w3d5f"><use xlink:href="#wave" class="svelte-3w3d5f"></use></svg> 
            <svg viewBox="0 0 560 20" class="water_wave water_wave_front svelte-3w3d5f"><use xlink:href="#wave" class="svelte-3w3d5f"></use></svg>`;

			attr(path0, "d", "M420,20c21.5-0.4,38.8-2.5,51.1-4.5c13.4-2.2,26.5-5.2,27.3-5.4C514,6.5,518,4.7,528.5,2.7c7.1-1.3,17.9-2.8,31.5-2.7c0,0,0,0,0,0v20H420z");
			attr(path0, "class", "svelte-3w3d5f");
			attr(path1, "d", "M420,20c-21.5-0.4-38.8-2.5-51.1-4.5c-13.4-2.2-26.5-5.2-27.3-5.4C326,6.5,322,4.7,311.5,2.7C304.3,1.4,293.6-0.1,280,0c0,0,0,0,0,0v20H420z");
			attr(path1, "class", "svelte-3w3d5f");
			attr(path2, "d", "M140,20c21.5-0.4,38.8-2.5,51.1-4.5c13.4-2.2,26.5-5.2,27.3-5.4C234,6.5,238,4.7,248.5,2.7c7.1-1.3,17.9-2.8,31.5-2.7c0,0,0,0,0,0v20H140z");
			attr(path2, "class", "svelte-3w3d5f");
			attr(path3, "d", "M140,20c-21.5-0.4-38.8-2.5-51.1-4.5c-13.4-2.2-26.5-5.2-27.3-5.4C46,6.5,42,4.7,31.5,2.7C24.3,1.4,13.6-0.1,0,0c0,0,0,0,0,0l0,20H140z");
			attr(path3, "class", "svelte-3w3d5f");
			attr(symbol, "id", "wave");
			attr(symbol, "class", "svelte-3w3d5f");
			attr(svg0, "version", "1.1");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr(svg0, "x", "0px");
			attr(svg0, "y", "0px");
			set_style(svg0, "display", "none");
			attr(svg0, "class", "svelte-3w3d5f");
			attr(div0, "id", "water");
			attr(div0, "class", "water svelte-3w3d5f");
			attr(div1, "class", "box svelte-3w3d5f");
			toggle_class(div1, "filling", /*currentState*/ ctx[1] === "filling");
			toggle_class(div1, "brewing", /*currentState*/ ctx[1] === "brewing");
			toggle_class(div1, "draining", /*currentState*/ ctx[1] === "draining");
			attr(div2, "class", "glass svelte-3w3d5f");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, svg0);
			append(svg0, symbol);
			append(symbol, path0);
			append(symbol, path1);
			append(symbol, path2);
			append(symbol, path3);
			append(div2, t0);
			append(div2, div1);
			mount_component(bar, div1, null);
			append(div1, t1);
			append(div1, div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "animationend", /*OnFillingEnd*/ ctx[2]),
					listen(div1, "animationend", /*OnBrewingEnd*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const bar_changes = {};
			if (dirty & /*nextBrewingTime*/ 1) bar_changes.timeLimit = /*nextBrewingTime*/ ctx[0];
			if (dirty & /*currentState*/ 2) bar_changes.start = /*currentState*/ ctx[1] === "brewing";
			bar.$set(bar_changes);

			if (dirty & /*currentState*/ 2) {
				toggle_class(div1, "filling", /*currentState*/ ctx[1] === "filling");
			}

			if (dirty & /*currentState*/ 2) {
				toggle_class(div1, "brewing", /*currentState*/ ctx[1] === "brewing");
			}

			if (dirty & /*currentState*/ 2) {
				toggle_class(div1, "draining", /*currentState*/ ctx[1] === "draining");
			}
		},
		i(local) {
			if (current) return;
			transition_in(bar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(bar);
			mounted = false;
			run_all(dispose);
		}
	};
}

let percents = 0;

function instance($$self, $$props, $$invalidate) {
	let { filling = false } = $$props;
	let { brewingTime = 10 } = $$props;
	let { fillCount = 1 } = $$props;
	let nextBrewingTime = brewingTime;
	const dispatch = createEventDispatcher();
	let root = document.documentElement;
	let currentState;

	function OnFillingEnd(e) {
		e.stopPropagation();

		if (currentState !== "draining") {
			console.log("filling end", currentState);
			$$invalidate(1, currentState = "brewing");
		} else {
			dispatch("drain");
		}
	}

	function OnBrewingEnd(e) {
		e.stopPropagation();
		console.log("brewing end", currentState, e);
		$$invalidate(1, currentState = "draining");
	}

	$$self.$$set = $$props => {
		if ("filling" in $$props) $$invalidate(4, filling = $$props.filling);
		if ("brewingTime" in $$props) $$invalidate(5, brewingTime = $$props.brewingTime);
		if ("fillCount" in $$props) $$invalidate(6, fillCount = $$props.fillCount);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*filling, brewingTime, fillCount, nextBrewingTime*/ 113) {
			$: {
				console.log("filling changed", filling);

				// will only get called when the `color` changed.
				if (filling) {
					$$invalidate(1, currentState = "filling");
					$$invalidate(4, filling = false);
					$$invalidate(0, nextBrewingTime = brewingTime + (fillCount - 1) * 2);
					console.log("nextBrewingTime", nextBrewingTime, brewingTime, fillCount);
					root.style.setProperty("--brewing-duration", `${nextBrewingTime}s`);
				}
			}
		}
	};

	return [
		nextBrewingTime,
		currentState,
		OnFillingEnd,
		OnBrewingEnd,
		filling,
		brewingTime,
		fillCount
	];
}

class Water extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { filling: 4, brewingTime: 5, fillCount: 6 });
	}
}

export default Water;