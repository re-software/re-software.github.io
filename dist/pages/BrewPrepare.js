/* src/pages/BrewPrepare.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import LinkButton from "../components/LinkButton.js";
import { _ } from "../../web_modules/svelte-i18n.js";

function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Next");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let h1;
	let t0_value = /*$_*/ ctx[0]("prepare_for_brewing") + "";
	let t0;
	let t1;
	let h2;
	let t2_value = /*$_*/ ctx[0]("add") + "";
	let t2;
	let t3;
	let div0;
	let t6;
	let div1;
	let t9;
	let linkbutton;
	let current;

	linkbutton = new LinkButton({
			props: {
				href: "/timer",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			h2 = element("h2");
			t2 = text(t2_value);
			t3 = space();
			div0 = element("div");
			div0.textContent = `${amount}g`;
			t6 = text("\n        of tea to your pot and prerape water with temperature of\n        ");
			div1 = element("div");
			div1.textContent = `${temperature}Â°C`;
			t9 = space();
			create_component(linkbutton.$$.fragment);
			attr(h1, "class", "mb-8 ps-4 flex justify-center");
			attr(h2, "class", "mb-8 ps-4 flex justify-center");
			attr(div0, "class", "flex items-center justify-center m-2 p-4 text-xl text-gray-700 bg-gray-200 rounded shadow select-none");
			attr(div1, "class", "flex items-center justify-center m-2 p-4 text-xl text-gray-700 bg-gray-200 rounded shadow select-none");
			attr(div2, "class", "flex flex-col bg-white rounded shadow p-4");
			attr(div3, "class", "flex flex-col items-center justify-center mt-4");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, h1);
			append(h1, t0);
			append(div2, t1);
			append(div2, h2);
			append(h2, t2);
			append(div2, t3);
			append(div2, div0);
			append(div2, t6);
			append(div2, div1);
			append(div2, t9);
			mount_component(linkbutton, div2, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$_*/ 1) && t0_value !== (t0_value = /*$_*/ ctx[0]("prepare_for_brewing") + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*$_*/ 1) && t2_value !== (t2_value = /*$_*/ ctx[0]("add") + "")) set_data(t2, t2_value);
			const linkbutton_changes = {};

			if (dirty & /*$$scope*/ 2) {
				linkbutton_changes.$$scope = { dirty, ctx };
			}

			linkbutton.$set(linkbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(linkbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(linkbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(linkbutton);
		}
	};
}

let amount = 5;
let temperature = 90;

function instance($$self, $$props, $$invalidate) {
	let $_;
	component_subscribe($$self, _, $$value => $$invalidate(0, $_ = $$value));
	return [$_];
}

class BrewPrepare extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default BrewPrepare;