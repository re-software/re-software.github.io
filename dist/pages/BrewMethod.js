/* src/pages/BrewMethod.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { _ } from "../../web_modules/svelte-i18n.js";
import { navigate } from "../../web_modules/svelte-routing.js";
import { BrewingGlasses } from "./constants.js";
import { currentTeaStore } from "../stores/currentTeaStore.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (25:12) {#each BrewingGlasses as glass}
function create_each_block(ctx) {
	let li;
	let div;
	let t0_value = /*glass*/ ctx[5] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr(div, "class", "m-2 p-4 text-md text-white bg-blue-500 rounded cursor-pointer select-none hover:bg-blue-600 active:bg-blue-700");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, t0);
			append(li, t1);

			if (!mounted) {
				dispose = listen(div, "click", /*handleMethodChoose*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t0_value = /*$_*/ ctx[0]("prepare_for_brewing") + "";
	let t0;
	let t1;
	let t2;
	let t3;
	let ul;
	let each_value = BrewingGlasses;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(/*name*/ ctx[1]);
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h1, "class", "mb-8 ps-4 flex justify-center");
			attr(ul, "class", "list-none flex flex-row");
			attr(div0, "class", "flex flex-col bg-white rounded shadow p-4");
			attr(div1, "class", "flex flex-col items-center justify-center mt-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h1);
			append(h1, t0);
			append(div0, t1);
			append(div0, t2);
			append(div0, t3);
			append(div0, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]("prepare_for_brewing") + "")) set_data(t0, t0_value);

			if (dirty & /*handleMethodChoose, BrewingGlasses*/ 4) {
				each_value = BrewingGlasses;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $_;
	component_subscribe($$self, _, $$value => $$invalidate(0, $_ = $$value));
	let currentTea = {};

	const unsubscribeCurrentTeaStore = currentTeaStore.subscribe(val => {
		$$invalidate(3, currentTea = val);
	});

	let { name } = currentTea;

	function handleMethodChoose() {
		navigate("/brew/prepare");
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentTea*/ 8) {
			$: {
				console.log("curr tea", currentTea);
			}
		}
	};

	return [$_, name, handleMethodChoose];
}

class BrewMethod extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default BrewMethod;